# Interpreter for shell commands
set shell sh

# Set '-eu' options for shell commands
set shellopts '-eu'

# Set internal field separator to "\n" for shell commands
set ifs "\n"

# Leave some space at the top and the bottom of the screen
set scrolloff 10

# Use enter for shell commands
map <enter> shell

# Execute current file
map x $$f
map X !$f

# Use an editor for text files and a file opener for the rest
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# Dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# Confirm before trash files
cmd trash ${{
    printf "$fx\n"
    printf "trash?[y/n]"
    read ans
    [ "$ans" = "y" ] && trash $fx
}}

# Use delete or trash command (trash command uses trash-cli)
# map D delete
map D trash

# Extract the current file
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# Compress current file or selected files with tar
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# Compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}
